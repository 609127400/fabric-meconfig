// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

/*
Package common is a generated protocol buffer package.

It is generated from these files:
	common.proto

It has these top-level messages:
	ChannelHeader
	SignatureHeader
	Header
	Payload
	Envelope
	Response
*/
package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// These status codes are intended to resemble selected HTTP status codes
type Status int32

const (
	Status_UNKNOWN                  Status = 0
	Status_SUCCESS                  Status = 200
	Status_BAD_REQUEST              Status = 400
	Status_FORBIDDEN                Status = 403
	Status_NOT_FOUND                Status = 404
	Status_REQUEST_ENTITY_TOO_LARGE Status = 413
	Status_INTERNAL_SERVER_ERROR    Status = 500
	Status_SERVICE_UNAVAILABLE      Status = 503
)

var Status_name = map[int32]string{
	0:   "UNKNOWN",
	200: "SUCCESS",
	400: "BAD_REQUEST",
	403: "FORBIDDEN",
	404: "NOT_FOUND",
	413: "REQUEST_ENTITY_TOO_LARGE",
	500: "INTERNAL_SERVER_ERROR",
	503: "SERVICE_UNAVAILABLE",
}
var Status_value = map[string]int32{
	"UNKNOWN":                  0,
	"SUCCESS":                  200,
	"BAD_REQUEST":              400,
	"FORBIDDEN":                403,
	"NOT_FOUND":                404,
	"REQUEST_ENTITY_TOO_LARGE": 413,
	"INTERNAL_SERVER_ERROR":    500,
	"SERVICE_UNAVAILABLE":      503,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 配置，命令类型
// 0000 0000 ,前4位是主Topic，后4位是子Topic
type Topic int32

const (
	Topic_FOO Topic = 0
	// CONFIG主题
	Topic_PEER_CONFIG              Topic = 16
	Topic_ORDERER_CONFIG           Topic = 32
	Topic_ORDERER_CHANNEL_CONFIG   Topic = 48
	Topic_LIST_CHANNEL_BASIC_INFO        Topic = 49
	Topic_LIST_CHANNEL_DETAIL_INFO Topic = 50
	Topic_ADD_ORG                  Topic = 52
	Topic_MODIFY_ORG               Topic = 56
	Topic_DELETE_ORG               Topic = 60
	Topic_DIVIDE_LINE              Topic = 96
	// COMMAND主题
	Topic_PEER_COMMAND    Topic = 112
	Topic_ORDERER_COMMAND Topic = 128
	// 其他配置
	// ...
	// Topic下有子Topic，因此客户端发送给服务器端的Topic要 topic&TopicMask 之后进行判断
	Topic_MASK Topic = 240
)

var Topic_name = map[int32]string{
	0:   "FOO",
	16:  "PEER_CONFIG",
	32:  "ORDERER_CONFIG",
	48:  "ORDERER_CHANNEL_CONFIG",
	49:  "LIST_CHANNEL_INFO",
	50:  "LIST_CHANNEL_DETAIL_INFO",
	52:  "ADD_ORG",
	56:  "MODIFY_ORG",
	60:  "DELETE_ORG",
	96:  "DIVIDE_LINE",
	112: "PEER_COMMAND",
	128: "ORDERER_COMMAND",
	240: "MASK",
}
var Topic_value = map[string]int32{
	"FOO":                      0,
	"PEER_CONFIG":              16,
	"ORDERER_CONFIG":           32,
	"ORDERER_CHANNEL_CONFIG":   48,
	"LIST_CHANNEL_INFO":        49,
	"LIST_CHANNEL_DETAIL_INFO": 50,
	"ADD_ORG":                  52,
	"MODIFY_ORG":               56,
	"DELETE_ORG":               60,
	"DIVIDE_LINE":              96,
	"PEER_COMMAND":             112,
	"ORDERER_COMMAND":          128,
	"MASK":                     240,
}

func (x Topic) String() string {
	return proto.EnumName(Topic_name, int32(x))
}
func (Topic) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Header is a generic replay prevention and identity message to include in a signed payload
type ChannelHeader struct {
	Type Topic `protobuf:"varint,1,opt,name=type,enum=common.Topic" json:"type,omitempty"`
	// Version indicates message protocol version
	Version int32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	// Timestamp is the local time when the message was created
	// by the sender
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	// Identifier of the channel this message is bound for
	ChannelId string `protobuf:"bytes,4,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	TxId      string `protobuf:"bytes,5,opt,name=tx_id,json=txId" json:"tx_id,omitempty"`
	Epoch     uint64 `protobuf:"varint,6,opt,name=epoch" json:"epoch,omitempty"`
	// Extension that may be attached based on the header type
	Extension []byte `protobuf:"bytes,7,opt,name=extension,proto3" json:"extension,omitempty"`
}

func (m *ChannelHeader) Reset()                    { *m = ChannelHeader{} }
func (m *ChannelHeader) String() string            { return proto.CompactTextString(m) }
func (*ChannelHeader) ProtoMessage()               {}
func (*ChannelHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ChannelHeader) GetType() Topic {
	if m != nil {
		return m.Type
	}
	return Topic_FOO
}

func (m *ChannelHeader) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ChannelHeader) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *ChannelHeader) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ChannelHeader) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *ChannelHeader) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *ChannelHeader) GetExtension() []byte {
	if m != nil {
		return m.Extension
	}
	return nil
}

type SignatureHeader struct {
	// Creator of the message, specified as a certificate chain
	Creator []byte `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// Arbitrary number that may only be used once. Can be used to detect replay attacks.
	Nonce []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *SignatureHeader) Reset()                    { *m = SignatureHeader{} }
func (m *SignatureHeader) String() string            { return proto.CompactTextString(m) }
func (*SignatureHeader) ProtoMessage()               {}
func (*SignatureHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SignatureHeader) GetCreator() []byte {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *SignatureHeader) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

// TODO:暂时没用
type Header struct {
	ChannelHeader   []byte `protobuf:"bytes,1,opt,name=channel_header,json=channelHeader,proto3" json:"channel_header,omitempty"`
	SignatureHeader []byte `protobuf:"bytes,2,opt,name=signature_header,json=signatureHeader,proto3" json:"signature_header,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Header) GetChannelHeader() []byte {
	if m != nil {
		return m.ChannelHeader
	}
	return nil
}

func (m *Header) GetSignatureHeader() []byte {
	if m != nil {
		return m.SignatureHeader
	}
	return nil
}

// Payload is the message contents (and header to allow for signing)
type Payload struct {
	// Header is included to provide identity and prevent replay
	// TODO:暂时没用
	Header *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// Data, the encoding of which is defined by the type in the header
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Payload) Reset()                    { *m = Payload{} }
func (m *Payload) String() string            { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()               {}
func (*Payload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Payload) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Payload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Envelope wraps a Payload with a signature so that the message may be authenticated
type Envelope struct {
	// A marshaled Payload
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// A signature by the creator specified in the Payload header
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Envelope) Reset()                    { *m = Envelope{} }
func (m *Envelope) String() string            { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()               {}
func (*Envelope) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Envelope) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Envelope) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Response struct {
	// A status code that should follow the HTTP status codes.
	Status Status `protobuf:"varint,1,opt,name=status,enum=common.Status" json:"status,omitempty"`
	// A message associated with the response code.
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Data    []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Response) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_UNKNOWN
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Response) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ChannelHeader)(nil), "common.ChannelHeader")
	proto.RegisterType((*SignatureHeader)(nil), "common.SignatureHeader")
	proto.RegisterType((*Header)(nil), "common.Header")
	proto.RegisterType((*Payload)(nil), "common.Payload")
	proto.RegisterType((*Envelope)(nil), "common.Envelope")
	proto.RegisterType((*Response)(nil), "common.Response")
	proto.RegisterEnum("common.Status", Status_name, Status_value)
	proto.RegisterEnum("common.Topic", Topic_name, Topic_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MEDealer service

type MEDealerClient interface {
	// 可根据配置类型在服务端自动分辨并分别处理
	DealConfigurationData(ctx context.Context, in *Envelope, opts ...grpc.CallOption) (*Response, error)
	// 在服务端直接执行命令，返回执行结果
	DealCommandData(ctx context.Context, in *Envelope, opts ...grpc.CallOption) (*Response, error)
}

type mEDealerClient struct {
	cc *grpc.ClientConn
}

func NewMEDealerClient(cc *grpc.ClientConn) MEDealerClient {
	return &mEDealerClient{cc}
}

func (c *mEDealerClient) DealConfigurationData(ctx context.Context, in *Envelope, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/common.MEDealer/DealConfigurationData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mEDealerClient) DealCommandData(ctx context.Context, in *Envelope, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/common.MEDealer/DealCommandData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MEDealer service

type MEDealerServer interface {
	// 可根据配置类型在服务端自动分辨并分别处理
	DealConfigurationData(context.Context, *Envelope) (*Response, error)
	// 在服务端直接执行命令，返回执行结果
	DealCommandData(context.Context, *Envelope) (*Response, error)
}

func RegisterMEDealerServer(s *grpc.Server, srv MEDealerServer) {
	s.RegisterService(&_MEDealer_serviceDesc, srv)
}

func _MEDealer_DealConfigurationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Envelope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MEDealerServer).DealConfigurationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.MEDealer/DealConfigurationData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MEDealerServer).DealConfigurationData(ctx, req.(*Envelope))
	}
	return interceptor(ctx, in, info, handler)
}

func _MEDealer_DealCommandData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Envelope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MEDealerServer).DealCommandData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.MEDealer/DealCommandData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MEDealerServer).DealCommandData(ctx, req.(*Envelope))
	}
	return interceptor(ctx, in, info, handler)
}

var _MEDealer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.MEDealer",
	HandlerType: (*MEDealerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DealConfigurationData",
			Handler:    _MEDealer_DealConfigurationData_Handler,
		},
		{
			MethodName: "DealCommandData",
			Handler:    _MEDealer_DealCommandData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}

func init() { proto.RegisterFile("common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 752 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x8f, 0xdb, 0x54,
	0x14, 0x1d, 0xe3, 0x7c, 0x4c, 0x6e, 0x32, 0xc9, 0xe3, 0xb6, 0x83, 0xac, 0xa8, 0x15, 0x21, 0x12,
	0x28, 0x74, 0x91, 0x42, 0x40, 0xa2, 0x0b, 0x58, 0x38, 0xf1, 0xcb, 0xd4, 0xaa, 0xf3, 0x5c, 0x9e,
	0x9d, 0x41, 0x65, 0xe3, 0xbe, 0x26, 0xaf, 0x99, 0x48, 0x89, 0x9f, 0x65, 0x3b, 0xd5, 0x74, 0x87,
	0xf8, 0x05, 0x48, 0xb0, 0xe5, 0x0f, 0xf0, 0x4b, 0xf8, 0x35, 0x88, 0x05, 0xd2, 0x6c, 0x91, 0xbf,
	0x12, 0x66, 0xc7, 0xce, 0xe7, 0x9c, 0xfb, 0xce, 0x3d, 0xf7, 0xbd, 0x9b, 0x40, 0x67, 0xa5, 0xf6,
	0x7b, 0x15, 0x8e, 0xa3, 0x58, 0xa5, 0x0a, 0x1b, 0x05, 0xea, 0x7f, 0xbc, 0x51, 0x6a, 0xb3, 0x93,
	0x4f, 0x73, 0xf6, 0xcd, 0xe1, 0xed, 0xd3, 0x74, 0xbb, 0x97, 0x49, 0x2a, 0xf6, 0x51, 0x51, 0x38,
	0xfc, 0x4b, 0x83, 0x8b, 0xd9, 0x8d, 0x08, 0x43, 0xb9, 0x7b, 0x2e, 0xc5, 0x5a, 0xc6, 0xf8, 0x09,
	0xd4, 0xd2, 0xf7, 0x91, 0x34, 0xb4, 0x81, 0x36, 0xea, 0x4e, 0x2e, 0xc6, 0xa5, 0xaf, 0xaf, 0xa2,
	0xed, 0x8a, 0xe7, 0x12, 0x1a, 0xd0, 0x7c, 0x27, 0xe3, 0x64, 0xab, 0x42, 0xe3, 0x83, 0x81, 0x36,
	0xaa, 0xf3, 0x0a, 0xe2, 0x33, 0x68, 0x1d, 0x3b, 0x18, 0xfa, 0x40, 0x1b, 0xb5, 0x27, 0xfd, 0x71,
	0x91, 0x61, 0x5c, 0x65, 0x18, 0xfb, 0x55, 0x05, 0x3f, 0x15, 0xe3, 0x63, 0x80, 0x55, 0x91, 0x23,
	0xd8, 0xae, 0x8d, 0xda, 0x40, 0x1b, 0xb5, 0x78, 0xab, 0x64, 0xec, 0x35, 0x3e, 0x80, 0x7a, 0x7a,
	0x9b, 0x29, 0xf5, 0x5c, 0xa9, 0xa5, 0xb7, 0xf6, 0x1a, 0x1f, 0x42, 0x5d, 0x46, 0x6a, 0x75, 0x63,
	0x34, 0x06, 0xda, 0xa8, 0xc6, 0x0b, 0x80, 0x8f, 0xa0, 0x25, 0x6f, 0x53, 0x19, 0xe6, 0xf9, 0x9a,
	0x03, 0x6d, 0xd4, 0xe1, 0x27, 0x62, 0x68, 0x42, 0xcf, 0xdb, 0x6e, 0x42, 0x91, 0x1e, 0x62, 0x59,
	0x4e, 0x6c, 0x40, 0x73, 0x15, 0x4b, 0x91, 0xaa, 0x38, 0x1f, 0xba, 0xc3, 0x2b, 0x98, 0x35, 0x08,
	0x55, 0xb8, 0x92, 0xf9, 0x98, 0x1d, 0x5e, 0x80, 0xe1, 0x8f, 0xd0, 0x28, 0x4f, 0x7e, 0x0a, 0xdd,
	0x2a, 0xf4, 0x4d, 0xce, 0x94, 0x06, 0x17, 0xab, 0x7b, 0x57, 0xfa, 0x39, 0x90, 0xa4, 0xea, 0x59,
	0x15, 0x16, 0x8e, 0xbd, 0xe4, 0x7e, 0x96, 0x21, 0x85, 0xe6, 0x4b, 0xf1, 0x7e, 0xa7, 0xc4, 0x1a,
	0x3f, 0x83, 0xc6, 0x7f, 0x4c, 0xdb, 0x93, 0x6e, 0xf5, 0x14, 0x45, 0x29, 0x2f, 0x55, 0x44, 0xa8,
	0xad, 0x45, 0x2a, 0x4a, 0xc7, 0xfc, 0x7b, 0x38, 0x85, 0x73, 0x1a, 0xbe, 0x93, 0x3b, 0x55, 0xbc,
	0x56, 0x54, 0x58, 0x56, 0xe3, 0x95, 0x30, 0xbb, 0xa9, 0x63, 0xff, 0xf2, 0xf8, 0x89, 0x18, 0xbe,
	0x86, 0x73, 0x2e, 0x93, 0x48, 0x85, 0x89, 0xcc, 0xb2, 0x24, 0xa9, 0x48, 0x0f, 0x49, 0xb9, 0x16,
	0xc7, 0x2c, 0x5e, 0xce, 0xf2, 0x52, 0xcd, 0x7a, 0xed, 0x65, 0x92, 0x88, 0x4d, 0xe1, 0xd7, 0xe2,
	0x15, 0x3c, 0xa6, 0xd4, 0x4f, 0x29, 0x9f, 0xfc, 0xa1, 0x41, 0xa3, 0x30, 0xc0, 0x36, 0x34, 0x97,
	0xec, 0x05, 0x73, 0x7f, 0x60, 0xe4, 0x0c, 0x3b, 0xd0, 0xf4, 0x96, 0xb3, 0x19, 0xf5, 0x3c, 0xf2,
	0xa7, 0x86, 0x04, 0xda, 0x53, 0xd3, 0x0a, 0x38, 0xfd, 0x7e, 0x49, 0x3d, 0x9f, 0xfc, 0xa2, 0x63,
	0x17, 0x5a, 0x73, 0x97, 0x4f, 0x6d, 0xcb, 0xa2, 0x8c, 0xfc, 0x9a, 0x63, 0xe6, 0xfa, 0xc1, 0xdc,
	0x5d, 0x32, 0x8b, 0xfc, 0xa6, 0xe3, 0x63, 0x30, 0xca, 0xea, 0x80, 0x32, 0xdf, 0xf6, 0x5f, 0x05,
	0xbe, 0xeb, 0x06, 0x8e, 0xc9, 0xaf, 0x28, 0xf9, 0x5d, 0xc7, 0x3e, 0x5c, 0xda, 0xcc, 0xa7, 0x9c,
	0x99, 0x4e, 0xe0, 0x51, 0x7e, 0x4d, 0x79, 0x40, 0x39, 0x77, 0x39, 0xf9, 0x47, 0x47, 0x03, 0x1e,
	0x64, 0x94, 0x3d, 0xa3, 0xc1, 0x92, 0x99, 0xd7, 0xa6, 0xed, 0x98, 0x53, 0x87, 0x92, 0x3b, 0xfd,
	0xc9, 0x9d, 0x06, 0xf5, 0xfc, 0x47, 0x80, 0x4d, 0xd0, 0xe7, 0xae, 0x4b, 0xce, 0xb0, 0x07, 0xed,
	0x97, 0x94, 0xf2, 0x60, 0xe6, 0xb2, 0xb9, 0x7d, 0x45, 0x08, 0x22, 0x74, 0x5d, 0x6e, 0x51, 0x7e,
	0xe2, 0x06, 0xd8, 0x87, 0x8f, 0x8e, 0xdc, 0x73, 0x93, 0x31, 0xea, 0x54, 0xda, 0x17, 0x78, 0x09,
	0x1f, 0x3a, 0xb6, 0xe7, 0x1f, 0x05, 0x9b, 0xcd, 0x5d, 0xf2, 0x25, 0x3e, 0x02, 0xe3, 0x1e, 0x6d,
	0x51, 0xdf, 0xb4, 0x4b, 0x75, 0x92, 0x5d, 0x95, 0x69, 0x59, 0x81, 0xcb, 0xaf, 0xc8, 0xd7, 0xd8,
	0x05, 0x58, 0xb8, 0x96, 0x3d, 0x7f, 0x95, 0xe3, 0x67, 0x19, 0xb6, 0xa8, 0x43, 0x7d, 0x9a, 0xe3,
	0x6f, 0xb3, 0x88, 0x96, 0x7d, 0x6d, 0x5b, 0x34, 0x70, 0x6c, 0x46, 0xc9, 0x6b, 0x24, 0xd0, 0x29,
	0x33, 0x2f, 0x16, 0x26, 0xb3, 0x48, 0x84, 0x0f, 0xa1, 0x77, 0x0a, 0x5d, 0x90, 0x3f, 0x69, 0xd8,
	0x82, 0xda, 0xc2, 0xf4, 0x5e, 0x90, 0xbf, 0xb5, 0xc9, 0xcf, 0x1a, 0x9c, 0x2f, 0xa8, 0x25, 0xc5,
	0x4e, 0xc6, 0xf8, 0x1d, 0x5c, 0x66, 0x5f, 0x33, 0x15, 0xbe, 0xdd, 0x6e, 0x0e, 0xb1, 0x48, 0xb7,
	0x2a, 0xb4, 0x44, 0x2a, 0x90, 0x54, 0x2b, 0x51, 0x2d, 0x5e, 0xff, 0xc8, 0x54, 0x6b, 0x34, 0x3c,
	0xc3, 0x6f, 0xa0, 0x57, 0x1c, 0xdf, 0xef, 0x45, 0xb8, 0xfe, 0xff, 0x07, 0xdf, 0x34, 0xf2, 0xbf,
	0x8f, 0xaf, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x14, 0x15, 0x16, 0x60, 0xe8, 0x04, 0x00, 0x00,
}
