
//将helloworld/helloworld.proto转化成.go然后存放在helloworld/下
//protoc -I. -I$GOPATH/src common.proto --go_out=plugins=grpc:.

syntax = "proto3";

import "github.com/hyperledger/fabric/protos/common/common.proto";
import "github.com/hyperledger/fabric/protos/peer/proposal_response.proto";


package mecommon;

/*
// These status codes are intended to resemble selected HTTP status codes
enum Status {
    UNKNOWN = 0;
    SUCCESS = 200;
    BAD_REQUEST = 400;
    FORBIDDEN = 403;
    NOT_FOUND = 404;
    REQUEST_ENTITY_TOO_LARGE = 413;
    INTERNAL_SERVER_ERROR = 500;
    SERVICE_UNAVAILABLE = 503;
}
*/

//部署状态
enum DeployStatus {
    UNCHECKED = 0; //未检查
    IS_ON_DC = 1; //DC - docker container
    IS_ON_PM = 2; //PM - physical machine
}

//配置，命令类型
//0xAABB ,AA是主Topic，BB是子Topic
enum Topic {
    FOO = 0;
    //CONFIG主题
    PEER_CONFIG = 256; //0x0100
    ORDERER_CONFIG = 512; //0x0200
    ORDERER_CHANNEL_CONFIG = 768; //0x0300
	LIST_CHANNEL_INFO = 770;
	    LIST_CHANNEL_BASIC_INFO = 771;
	    LIST_CHANNEL_DETAIL_INFO = 780;
	ADD_ORG = 790;
	MODIFY_ORG = 800;
	DELETE_ORG = 810;
    LINE_BETWEEN_CONFIG_AND_COMMAND = 1536; //0x0600
    //COMMAND主题
    PEER_COMMAND = 1792; //0x0700
    ORDERER_COMMAND = 2048; //0x0800

    LINE_BETWEEN_COMMAND_AND_OTHER = 3840; //0x0f00
    //其他配置
    I_AM_YOU = 7936; //0x0a00
	SIGN_MY_UPDATE_CONFIG = 7940;
    //Topic下有子Topic，因此客户端发送给服务器端的Topic要 topic&TopicMask 之后进行判断
    MASK = 65280; //0xff00
}

/*
// Header is a generic replay prevention and identity message to include in a signed payload
message ChannelHeader {
    Topic type = 1; // Header types 0-10000 are reserved and defined by HeaderType
    // Version indicates message protocol version
    int32 version = 2;
    // Timestamp is the local time when the message was created
    // by the sender
    google.protobuf.Timestamp timestamp = 3;
    // Identifier of the channel this message is bound for
    string channel_id = 4;
    string tx_id = 5;
    uint64 epoch = 6;
    // Extension that may be attached based on the header type
    bytes extension = 7;
}

message SignatureHeader {
    // Creator of the message, specified as a certificate chain
    bytes creator = 1;
    // Arbitrary number that may only be used once. Can be used to detect replay attacks.
    bytes nonce = 2;
}

//TODO:暂时没用
message Header {
    bytes channel_header = 1;
    bytes signature_header = 2;
}

// Payload is the message contents (and header to allow for signing)
message Payload {
    // Header is included to provide identity and prevent replay
    //TODO:暂时没用
    Header header = 1;
    // Data, the encoding of which is defined by the type in the header
    bytes data = 2;
}

// Envelope wraps a Payload with a signature so that the message may be authenticated
message Envelope {
    // A marshaled Payload
    bytes payload = 1;
    // A signature by the creator specified in the Payload header
    bytes signature = 2;
}

message Response {
    // A status code that should follow the HTTP status codes.
    Status status = 1;
    // A message associated with the response code.
    string message = 2;

    bytes data = 3;
}
*/

service MEDealer {
    //可根据配置类型在服务端自动分辨并分别处理
    rpc DealConfigurationData(common.Envelope) returns (protos.Response) {}
    //在服务端直接执行命令，返回执行结果
    rpc DealCommandData(common.Envelope) returns (protos.Response) {}
    //服务端调用客户端给另一个服务端发消息
    rpc IamYou(common.Envelope) returns (protos.Response) {}
}
