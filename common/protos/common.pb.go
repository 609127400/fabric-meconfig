// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

/*
Package mecommon is a generated protocol buffer package.

It is generated from these files:
	common.proto

It has these top-level messages:
*/
package mecommon

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/hyperledger/fabric/protos/common"
import protos "github.com/hyperledger/fabric/protos/peer"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 部署状态
type DeployStatus int32

const (
	DeployStatus_UNCHECKED DeployStatus = 0
	DeployStatus_IS_ON_DC  DeployStatus = 1
	DeployStatus_IS_ON_PM  DeployStatus = 2
)

var DeployStatus_name = map[int32]string{
	0: "UNCHECKED",
	1: "IS_ON_DC",
	2: "IS_ON_PM",
}
var DeployStatus_value = map[string]int32{
	"UNCHECKED": 0,
	"IS_ON_DC":  1,
	"IS_ON_PM":  2,
}

func (x DeployStatus) String() string {
	return proto.EnumName(DeployStatus_name, int32(x))
}
func (DeployStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 配置，命令类型
// 0xAABB ,AA是主Topic，BB是子Topic
type Topic int32

const (
	Topic_FOO Topic = 0
	// CONFIG主题
	Topic_PEER_CONFIG                     Topic = 256
	Topic_ORDERER_CONFIG                  Topic = 512
	Topic_ORDERER_CHANNEL_CONFIG          Topic = 768
	Topic_LIST_CHANNEL_INFO               Topic = 770
	Topic_LIST_CHANNEL_BASIC_INFO         Topic = 771
	Topic_LIST_CHANNEL_DETAIL_INFO        Topic = 780
	Topic_ADD_ORG                         Topic = 790
	Topic_MODIFY_ORG                      Topic = 800
	Topic_DELETE_ORG                      Topic = 810
	Topic_LINE_BETWEEN_CONFIG_AND_COMMAND Topic = 1536
	// COMMAND主题
	Topic_PEER_COMMAND                   Topic = 1792
	Topic_ORDERER_COMMAND                Topic = 2048
	Topic_LINE_BETWEEN_COMMAND_AND_OTHER Topic = 3840
	// 其他配置
	Topic_I_AM_YOU              Topic = 7936
	Topic_SIGN_MY_UPDATE_CONFIG Topic = 7940
	// Topic下有子Topic，因此客户端发送给服务器端的Topic要 topic&TopicMask 之后进行判断
	Topic_MASK Topic = 65280
)

var Topic_name = map[int32]string{
	0:     "FOO",
	256:   "PEER_CONFIG",
	512:   "ORDERER_CONFIG",
	768:   "ORDERER_CHANNEL_CONFIG",
	770:   "LIST_CHANNEL_INFO",
	771:   "LIST_CHANNEL_BASIC_INFO",
	780:   "LIST_CHANNEL_DETAIL_INFO",
	790:   "ADD_ORG",
	800:   "MODIFY_ORG",
	810:   "DELETE_ORG",
	1536:  "LINE_BETWEEN_CONFIG_AND_COMMAND",
	1792:  "PEER_COMMAND",
	2048:  "ORDERER_COMMAND",
	3840:  "LINE_BETWEEN_COMMAND_AND_OTHER",
	7936:  "I_AM_YOU",
	7940:  "SIGN_MY_UPDATE_CONFIG",
	65280: "MASK",
}
var Topic_value = map[string]int32{
	"FOO":                             0,
	"PEER_CONFIG":                     256,
	"ORDERER_CONFIG":                  512,
	"ORDERER_CHANNEL_CONFIG":          768,
	"LIST_CHANNEL_INFO":               770,
	"LIST_CHANNEL_BASIC_INFO":         771,
	"LIST_CHANNEL_DETAIL_INFO":        780,
	"ADD_ORG":                         790,
	"MODIFY_ORG":                      800,
	"DELETE_ORG":                      810,
	"LINE_BETWEEN_CONFIG_AND_COMMAND": 1536,
	"PEER_COMMAND":                    1792,
	"ORDERER_COMMAND":                 2048,
	"LINE_BETWEEN_COMMAND_AND_OTHER":  3840,
	"I_AM_YOU":                        7936,
	"SIGN_MY_UPDATE_CONFIG":           7940,
	"MASK":                            65280,
}

func (x Topic) String() string {
	return proto.EnumName(Topic_name, int32(x))
}
func (Topic) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterEnum("mecommon.DeployStatus", DeployStatus_name, DeployStatus_value)
	proto.RegisterEnum("mecommon.Topic", Topic_name, Topic_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MEDealer service

type MEDealerClient interface {
	// 可根据配置类型在服务端自动分辨并分别处理
	DealConfigurationData(ctx context.Context, in *common.Envelope, opts ...grpc.CallOption) (*protos.Response, error)
	// 在服务端直接执行命令，返回执行结果
	DealCommandData(ctx context.Context, in *common.Envelope, opts ...grpc.CallOption) (*protos.Response, error)
	// 服务端调用客户端给另一个服务端发消息
	IamYou(ctx context.Context, in *common.Envelope, opts ...grpc.CallOption) (*protos.Response, error)
}

type mEDealerClient struct {
	cc *grpc.ClientConn
}

func NewMEDealerClient(cc *grpc.ClientConn) MEDealerClient {
	return &mEDealerClient{cc}
}

func (c *mEDealerClient) DealConfigurationData(ctx context.Context, in *common.Envelope, opts ...grpc.CallOption) (*protos.Response, error) {
	out := new(protos.Response)
	err := grpc.Invoke(ctx, "/mecommon.MEDealer/DealConfigurationData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mEDealerClient) DealCommandData(ctx context.Context, in *common.Envelope, opts ...grpc.CallOption) (*protos.Response, error) {
	out := new(protos.Response)
	err := grpc.Invoke(ctx, "/mecommon.MEDealer/DealCommandData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mEDealerClient) IamYou(ctx context.Context, in *common.Envelope, opts ...grpc.CallOption) (*protos.Response, error) {
	out := new(protos.Response)
	err := grpc.Invoke(ctx, "/mecommon.MEDealer/IamYou", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MEDealer service

type MEDealerServer interface {
	// 可根据配置类型在服务端自动分辨并分别处理
	DealConfigurationData(context.Context, *common.Envelope) (*protos.Response, error)
	// 在服务端直接执行命令，返回执行结果
	DealCommandData(context.Context, *common.Envelope) (*protos.Response, error)
	// 服务端调用客户端给另一个服务端发消息
	IamYou(context.Context, *common.Envelope) (*protos.Response, error)
}

func RegisterMEDealerServer(s *grpc.Server, srv MEDealerServer) {
	s.RegisterService(&_MEDealer_serviceDesc, srv)
}

func _MEDealer_DealConfigurationData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Envelope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MEDealerServer).DealConfigurationData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mecommon.MEDealer/DealConfigurationData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MEDealerServer).DealConfigurationData(ctx, req.(*common.Envelope))
	}
	return interceptor(ctx, in, info, handler)
}

func _MEDealer_DealCommandData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Envelope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MEDealerServer).DealCommandData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mecommon.MEDealer/DealCommandData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MEDealerServer).DealCommandData(ctx, req.(*common.Envelope))
	}
	return interceptor(ctx, in, info, handler)
}

func _MEDealer_IamYou_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Envelope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MEDealerServer).IamYou(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mecommon.MEDealer/IamYou",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MEDealerServer).IamYou(ctx, req.(*common.Envelope))
	}
	return interceptor(ctx, in, info, handler)
}

var _MEDealer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mecommon.MEDealer",
	HandlerType: (*MEDealerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DealConfigurationData",
			Handler:    _MEDealer_DealConfigurationData_Handler,
		},
		{
			MethodName: "DealCommandData",
			Handler:    _MEDealer_DealCommandData_Handler,
		},
		{
			MethodName: "IamYou",
			Handler:    _MEDealer_IamYou_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}

func init() { proto.RegisterFile("common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 485 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xb1, 0x6f, 0xd3, 0x40,
	0x14, 0xc6, 0xdb, 0xa6, 0xb8, 0xe1, 0xe1, 0x36, 0xd7, 0x07, 0x2d, 0x28, 0x40, 0x91, 0x80, 0xa9,
	0x43, 0x22, 0xc1, 0x00, 0x0c, 0x54, 0x72, 0x7d, 0x97, 0xc4, 0x6a, 0x7c, 0x17, 0xd9, 0x8e, 0x50,
	0xa6, 0x93, 0x93, 0x5e, 0xd3, 0x48, 0xb1, 0xcf, 0xb2, 0x1d, 0xa4, 0x6e, 0x11, 0x74, 0x64, 0x66,
	0x66, 0x66, 0xe4, 0x0f, 0x44, 0xa8, 0xb6, 0x49, 0x5b, 0xa6, 0xb2, 0xbd, 0xf7, 0xfb, 0xde, 0xf7,
	0xe9, 0xde, 0xe9, 0x81, 0x39, 0xd1, 0x51, 0xa4, 0xe3, 0x56, 0x92, 0xea, 0x5c, 0x63, 0x3d, 0x52,
	0x65, 0xdf, 0x7c, 0x3f, 0x9d, 0xe5, 0xe7, 0x8b, 0x71, 0x6b, 0xa2, 0xa3, 0xf6, 0xf9, 0x45, 0xa2,
	0xd2, 0xb9, 0x3a, 0x9d, 0xaa, 0xb4, 0x7d, 0x16, 0x8e, 0xd3, 0xd9, 0xa4, 0x5d, 0x8c, 0x67, 0xed,
	0x72, 0xb8, 0x7d, 0x33, 0xa3, 0x69, 0xdd, 0xc9, 0x99, 0x28, 0x95, 0x5e, 0xd5, 0x89, 0xce, 0xc2,
	0xb9, 0x4c, 0x55, 0x96, 0xe8, 0x38, 0x53, 0x65, 0xc4, 0xe1, 0x07, 0x30, 0xa9, 0x4a, 0xe6, 0xfa,
	0xc2, 0xcf, 0xc3, 0x7c, 0x91, 0xe1, 0x36, 0xdc, 0x1f, 0x72, 0xbb, 0xc7, 0xec, 0x13, 0x46, 0xc9,
	0x1a, 0x9a, 0x50, 0x77, 0x7c, 0x29, 0xb8, 0xa4, 0x36, 0x59, 0xbf, 0xee, 0x06, 0x2e, 0xd9, 0x38,
	0xbc, 0xac, 0xc1, 0xbd, 0x40, 0x27, 0xb3, 0x09, 0x6e, 0x41, 0xad, 0x23, 0x04, 0x59, 0x43, 0x02,
	0x0f, 0x06, 0x8c, 0x79, 0xd2, 0x16, 0xbc, 0xe3, 0x74, 0xc9, 0x72, 0x03, 0x1f, 0xc2, 0x8e, 0xf0,
	0x28, 0xf3, 0x6e, 0xc0, 0x4d, 0x7c, 0x0a, 0xfb, 0x2b, 0xd8, 0xb3, 0x38, 0x67, 0xfd, 0x95, 0x68,
	0xe0, 0x3e, 0xec, 0xf6, 0x1d, 0x3f, 0x58, 0x29, 0x0e, 0xef, 0x08, 0xf2, 0xc5, 0xc0, 0x67, 0xf0,
	0xf8, 0x16, 0x3f, 0xb6, 0x7c, 0xc7, 0x2e, 0xd5, 0xaf, 0x06, 0x3e, 0x87, 0x27, 0xb7, 0x54, 0xca,
	0x02, 0xcb, 0xa9, 0xcc, 0xdf, 0x0c, 0x34, 0x61, 0xcb, 0xa2, 0x54, 0x0a, 0xaf, 0x4b, 0xbe, 0x1b,
	0xd8, 0x00, 0x70, 0x05, 0x75, 0x3a, 0xa3, 0x02, 0xfc, 0x28, 0x00, 0x65, 0x7d, 0x16, 0xb0, 0x02,
	0xfc, 0x34, 0xf0, 0x35, 0xbc, 0xe8, 0x3b, 0x9c, 0xc9, 0x63, 0x16, 0x7c, 0x62, 0x8c, 0x57, 0xcf,
	0x93, 0x16, 0xa7, 0xd2, 0x16, 0xae, 0x6b, 0x71, 0x4a, 0x96, 0x26, 0xee, 0x82, 0x59, 0xad, 0x5b,
	0xa1, 0x1d, 0x7c, 0x04, 0x8d, 0xeb, 0x7d, 0x2b, 0x4a, 0xf0, 0x15, 0x1c, 0xfc, 0x13, 0x57, 0x48,
	0x45, 0x9e, 0x08, 0x7a, 0xcc, 0x23, 0xcb, 0x03, 0xdc, 0x86, 0xba, 0x23, 0x2d, 0x57, 0x8e, 0xc4,
	0x90, 0x2c, 0x8f, 0xb0, 0x09, 0x7b, 0xbe, 0xd3, 0xe5, 0xd2, 0x1d, 0xc9, 0xe1, 0x80, 0x5a, 0x01,
	0xfb, 0xfb, 0x47, 0x97, 0x47, 0x08, 0xb0, 0xe9, 0x5a, 0xfe, 0x09, 0x59, 0xfe, 0xae, 0xbd, 0xf9,
	0xb5, 0x0e, 0x75, 0x97, 0x51, 0x15, 0xce, 0x55, 0x8a, 0x1f, 0x61, 0xef, 0xaa, 0xb2, 0x75, 0x7c,
	0x36, 0x9b, 0x2e, 0xd2, 0x30, 0x9f, 0xe9, 0x98, 0x86, 0x79, 0x88, 0xa4, 0x55, 0x5d, 0x0e, 0x8b,
	0x3f, 0xab, 0xb9, 0x4e, 0x54, 0x93, 0x94, 0x17, 0x90, 0xb5, 0xbc, 0xea, 0x22, 0x5e, 0xae, 0xe1,
	0x3b, 0x68, 0x94, 0xf6, 0x28, 0x0a, 0xe3, 0xd3, 0xff, 0x30, 0xb6, 0xc0, 0x70, 0xc2, 0x68, 0xa4,
	0x17, 0x77, 0x9b, 0x1f, 0x1b, 0x05, 0x7a, 0xfb, 0x27, 0x00, 0x00, 0xff, 0xff, 0x93, 0x55, 0x04,
	0x03, 0x14, 0x03, 0x00, 0x00,
}
